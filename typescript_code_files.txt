/**
 * @fileoverview Types for the config-array package.
 * @author Nicholas C. Zakas
 */

export interface ConfigObject {
	/**
	 * The files to include.
	 */
	files?: string[];

	/**
	 * The files to exclude.
	 */
	ignores?: string[];

	/**
	 * The name of the config object.
	 */
	name?: string;

	// may also have any number of other properties
	[key: string]: unknown;
}
/**
 * @fileoverview Types for the config-array package.
 * @author Nicholas C. Zakas
 */

export interface ConfigObject {
	/**
	 * The files to include.
	 */
	files?: string[];

	/**
	 * The files to exclude.
	 */
	ignores?: string[];

	/**
	 * The name of the config object.
	 */
	name?: string;

	// may also have any number of other properties
	[key: string]: unknown;
}
/**
 * @fileoverview Types for object-schema package.
 */

/**
 * Built-in validation strategies.
 */
export type BuiltInValidationStrategy =
	| "array"
	| "boolean"
	| "number"
	| "object"
	| "object?"
	| "string"
	| "string!";

/**
 * Built-in merge strategies.
 */
export type BuiltInMergeStrategy = "assign" | "overwrite" | "replace";

/**
 * Property definition.
 */
export interface PropertyDefinition {
	/**
	 * Indicates if the property is required.
	 */
	required: boolean;

	/**
	 * The other properties that must be present when this property is used.
	 */
	requires?: string[];

	/**
	 * The strategy to merge the property.
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any -- https://github.com/eslint/rewrite/pull/90#discussion_r1687206213
	merge: BuiltInMergeStrategy | ((target: any, source: any) => any);

	/**
	 * The strategy to validate the property.
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any -- https://github.com/eslint/rewrite/pull/90#discussion_r1687206213
	validate: BuiltInValidationStrategy | ((value: any) => void);

	/**
	 * The schema for the object value of this property.
	 */
	schema?: ObjectDefinition;
}

/**
 * Object definition.
 */
export type ObjectDefinition = Record<string, PropertyDefinition>;
/**
 * @fileoverview Types for object-schema package.
 */

/**
 * Built-in validation strategies.
 */
export type BuiltInValidationStrategy =
	| "array"
	| "boolean"
	| "number"
	| "object"
	| "object?"
	| "string"
	| "string!";

/**
 * Built-in merge strategies.
 */
export type BuiltInMergeStrategy = "assign" | "overwrite" | "replace";

/**
 * Property definition.
 */
export interface PropertyDefinition {
	/**
	 * Indicates if the property is required.
	 */
	required: boolean;

	/**
	 * The other properties that must be present when this property is used.
	 */
	requires?: string[];

	/**
	 * The strategy to merge the property.
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any -- https://github.com/eslint/rewrite/pull/90#discussion_r1687206213
	merge: BuiltInMergeStrategy | ((target: any, source: any) => any);

	/**
	 * The strategy to validate the property.
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any -- https://github.com/eslint/rewrite/pull/90#discussion_r1687206213
	validate: BuiltInValidationStrategy | ((value: any) => void);

	/**
	 * The schema for the object value of this property.
	 */
	schema?: ObjectDefinition;
}

/**
 * Object definition.
 */
export type ObjectDefinition = Record<string, PropertyDefinition>;
/**
 * @fileoverview Types for the plugin-kit package.
 * @author Nicholas C. Zakas
 */

export type StringConfig = Record<string, string | null>;
export type BooleanConfig = Record<string, boolean>;
// src/types/webhooks.ts

export type WebhookEventType = 
  | 'Form Submitted'
  | 'Intake Submitted'
  | 'AppointmentCreated'
  | 'AppointmentUpdated'
  | 'AppointmentRescheduled'
  | 'AppointmentCancelled'
  | 'Appointment Created'  // Keep old formats for backward compatibility
  | 'Appointment Updated'
  | 'Appointment Rescheduled'
  | 'Appointment Cancelled'
  | 'AppointmentCanceled'
  | 'Appointment Canceled'
  | 'AppointmentDeleted'
  | 'Appointment Deleted'
  | 'Form Submitted'
  | 'Intake Submitted';

export interface IntakeQAppointment {
  Id: string;
  ClientName: string;
  ClientEmail: string;
  ClientPhone: string;
  ClientDateOfBirth: string;
  ClientId: number;
  Status: string;
  StartDate: number;
  EndDate: number;
  Duration: number;
  ServiceName: string;
  ServiceId: string;
  LocationName: string;
  LocationId: string;
  Price: number;
  PractitionerName: string;
  PractitionerEmail: string;
  PractitionerId: string;
  IntakeId: string | null;
  DateCreated: number;
  CreatedBy: string;
  BookedByClient: boolean;
  ExternalClientId?: string;
  StartDateIso: string;
  EndDateIso: string;
  StartDateLocal: string;
  EndDateLocal: string;
  StartDateLocalFormatted: string;
  CancellationReason?: string;
  RecurrencePattern?: {
    frequency: 'weekly' | 'biweekly' | 'monthly';
    occurrences: number;
    endDate?: string;
  };
  [key: string]: any;
}

export interface IntakeQWebhookPayload {
  IntakeId?: string;
  Type?: WebhookEventType;  // Keep Type for backward compatibility
  EventType: WebhookEventType; // Make EventType required
  ClientId: number;
  ClientName: string;
  ClientEmail: string;
  ExternalClientId?: string;
  PracticeId: string;
  ExternalPracticeId?: string | null;
  formId?: string;
  responses?: Record<string, any>;
  Appointment?: IntakeQAppointment;
  ActionPerformedByClient?: boolean;
}

export interface WebhookResponse {
  success: boolean;
  error?: string;
  details?: any;
}

export class WebhookError extends Error {
  constructor(
    message: string,
    public readonly statusCode: number = 500,
    public readonly details?: any
  ) {
    super(message);
    this.name = 'WebhookError';
  }
}// src/types/scheduling.ts

export type SessionType = 'in-person' | 'telehealth' | 'group' | 'family';
export type AppointmentSource = 'intakeq' | 'manual';
// Add after export type AppointmentSource = 'intakeq' | 'manual';
export type AlertSeverity = 'high' | 'medium' | 'low';

export interface AppointmentRecord {
  appointmentId: string;
  clientId: string;
  clientName: string; // Add this property
  clinicianId: string;
  clinicianName: string; // Add this property
  officeId: string;
  sessionType: 'in-person' | 'telehealth' | 'group' | 'family';
  startTime: string;
  endTime: string;
  status: 'scheduled' | 'completed' | 'cancelled' | 'rescheduled';
  lastUpdated: string;
  source: 'intakeq' | 'manual'; // Update the type to a union type
  requirements?: {
    accessibility?: boolean;
    specialFeatures?: string[];
  };
  notes?: string;
}

export interface DailyScheduleSummary {
  date: string;
  appointments: AppointmentRecord[];
  conflicts: Array<{
    type: string;
    description: string;
    severity: AlertSeverity;
    officeId?: string;
    appointmentIds?: string[];
  }>;
  alerts: Array<{
    type: string;
    message: string;
    severity: AlertSeverity;
  }>;
  officeUtilization: Map<string, {
    totalSlots: number;
    bookedSlots: number;
    specialNotes?: string[];
  }>;
}

export interface SchedulingRequest {
  clientId: string;
  clinicianId: string;
  dateTime: string;
  duration: number;
  sessionType: SessionType;
  clientAge?: number;
  requirements?: {
    accessibility?: boolean;
    roomPreference?: string;
    specialFeatures?: string[];
  };
}

export interface SchedulingResult {
  success: boolean;
  officeId?: string;
  conflicts?: SchedulingConflict[];
  notes?: string;
  error?: string;
  evaluationLog?: string[];
}

export interface SchedulingConflict {
  officeId: string;
  existingBooking: {
    clientId: string;
    clinicianId: string;
    sessionType: SessionType;
    dateTime: string;
    duration: number;
  };
  resolution?: {
    type: 'relocate' | 'cannot-relocate';
    reason: string;
    newOfficeId?: string;
  };
}

export interface TimeSlotRequest {
  officeId: string;
  dateTime: string;
  duration: number;
}

export interface ValidationResult {
  isValid: boolean;
  conflicts?: string[];
  error?: string;
}// src/lib/types.ts

export interface SheetOffice {
    officeId: string;
    name: string;
    unit: string;
    inService: boolean;     // New field
    floor: 'upstairs' | 'downstairs';
    isAccessible: boolean;
    size: 'small' | 'medium' | 'large';
    ageGroups: string[];
    specialFeatures: string[];
    primaryClinician?: string;
    alternativeClinicians?: string[];
    isFlexSpace: boolean;
    notes?: string;
  }// src/types/sheets.ts

export interface SheetOffice {
  officeId: string;
  name: string;
  unit: string;
  inService: boolean;
  floor: 'upstairs' | 'downstairs';
  isAccessible: boolean;
  size: 'small' | 'medium' | 'large';
  ageGroups: string[];
  specialFeatures: string[];
  primaryClinician?: string;
  alternativeClinicians?: string[];
  isFlexSpace: boolean;
  notes?: string;
}

export interface SheetClinician {
  clinicianId: string;
  name: string;
  email: string;
  role: 'owner' | 'admin' | 'clinician' | 'intern';
  ageRangeMin: number;
  ageRangeMax: number;
  specialties: string[];
  caseloadLimit: number;
  currentCaseload: number;
  preferredOffices: string[];
  allowsRelationship: boolean;
  certifications: string[];
  intakeQPractitionerId: string;
}

export interface AssignmentRule {
  priority: number;
  ruleName: string;
  ruleType: string;
  condition: string;
  officeIds: string[];
  overrideLevel: 'hard' | 'soft' | 'none';
  active: boolean;
  notes?: string;
}

export interface ClientPreference {
  clientId: string;
  name: string;
  email: string;
  mobilityNeeds: string[];
  sensoryPreferences: string[];
  physicalNeeds: string[];
  roomConsistency: number;
  supportNeeds: string[];
  specialFeatures: string[];  // Added this field
  additionalNotes?: string;
  lastUpdated: string;
  preferredClinician?: string;
  assignedOffice?: string;
}

export interface ScheduleConfig {
  settingName: string;
  value: string;
  description: string;
  lastUpdated: string;
  updatedBy: string;
}

export interface IntegrationSetting {
  serviceName: string;
  settingType: string;
  value: string;
  description: string;
  lastUpdated: string;
}

export interface AuditLogEntry {
  timestamp: string;
  eventType: string;
  description: string;
  user: string;
  previousValue?: string;
  newValue?: string;
  systemNotes?: string;
}// src/lib/scheduling/service.ts

import { GoogleSheetsService } from '../google/sheets';
import type { 
  SheetOffice, 
  AssignmentRule,
  ClientPreference,
} from '@/types/sheets';

// Scheduling Types
interface SchedulingRequest {
  clientId: string;
  clinicianId: string;
  dateTime: string;
  duration: number;
  sessionType: string;
  requirements?: {
    accessibility?: boolean;
    roomPreference?: string;
    specialFeatures?: string[];
  };
}

interface SchedulingResult {
  success: boolean;
  officeId?: string;
  conflicts?: string[];
  notes?: string;
  error?: string;
}

export class SchedulingService {
  private sheetsService: GoogleSheetsService;

  constructor(sheetsService: GoogleSheetsService) {
    this.sheetsService = sheetsService;
  }

  /**
   * Find the optimal office assignment based on business rules and constraints
   */
  async findOptimalOffice(request: SchedulingRequest): Promise<SchedulingResult> {
    try {
      // Get all active data needed for assignment
      const [offices, rules, clientPrefs] = await Promise.all([
        this.sheetsService.getOffices(),
        this.sheetsService.getAssignmentRules(),
        this.sheetsService.getClientPreferences()
      ]);

      // Filter to only in-service offices
      const availableOffices = offices.filter(office => office.inService);
      
      // Get client preferences if they exist
      const clientPref = clientPrefs.find(p => p.clientId === request.clientId);

      // Sort rules by priority (highest first)
      const sortedRules = rules
        .filter(rule => rule.active)
        .sort((a, b) => b.priority - a.priority);

      // Apply rules to find matching offices
      const matches = this.applyRules(request, availableOffices, sortedRules, clientPref);

      if (matches.length === 0) {
        return {
          success: false,
          error: 'No suitable offices found matching requirements'
        };
      }

      // Select best match based on scoring
      const bestMatch = this.scoreCandidates(matches, request, clientPref);

      // Log the assignment decision
      await this.logAssignment(bestMatch, request);

      return {
        success: true,
        officeId: bestMatch.officeId
      };

    } catch (error) {
      console.error('Error in findOptimalOffice:', error);
      return {
        success: false,
        error: 'Failed to process office assignment'
      };
    }
  }

  /**
   * Apply business rules to filter available offices
   */
  private applyRules(
    request: SchedulingRequest,
    offices: SheetOffice[],
    rules: AssignmentRule[],
    clientPref?: ClientPreference
  ): SheetOffice[] {
    let candidates = [...offices];

    // Apply each rule in priority order
    for (const rule of rules) {
      const beforeCount = candidates.length;
      
      switch (rule.ruleType) {
        case 'accessibility':
          if (request.requirements?.accessibility || clientPref?.mobilityNeeds?.length) {
            candidates = candidates.filter(o => o.isAccessible);
          }
          break;

        case 'fixed':
          // Handle fixed office assignments (e.g. specific clinician must use specific office)
          if (rule.condition.includes(request.clinicianId)) {
            candidates = candidates.filter(o => rule.officeIds.includes(o.officeId));
          }
          break;

        case 'room_consistency':
          // Honor room consistency requirements if specified
          if (clientPref?.roomConsistency && clientPref.roomConsistency >= 4) {
            const preferredOffice = clientPref.assignedOffice;
            if (preferredOffice) {
              candidates = candidates.filter(o => o.officeId === preferredOffice);
            }
          }
          break;

        case 'special_features':
          // Match required special features
          if (request.requirements?.specialFeatures?.length) {
            candidates = candidates.filter(o => 
              request.requirements?.specialFeatures?.every((feature: string) => 
                o.specialFeatures.includes(feature)
              )
            );
          }
          break;
      }

      // If rule is 'hard' and filtered out all offices, return empty to force failure
      if (rule.overrideLevel === 'hard' && beforeCount > 0 && candidates.length === 0) {
        return [];
      }
    }

    return candidates;
  }

  /**
   * Score candidate offices to find best match
   */
  private scoreCandidates(
    offices: SheetOffice[], 
    request: SchedulingRequest,
    clientPref?: ClientPreference
  ): SheetOffice {
    const scored = offices.map(office => {
      let score = 0;

      // Prefer offices that match client preferences
      if (clientPref?.assignedOffice === office.officeId) {
        score += 5;
      }

      // Prefer offices assigned to the clinician
      if (office.primaryClinician === request.clinicianId) {
        score += 3;
      }
      if (office.alternativeClinicians?.includes(request.clinicianId)) {
        score += 2;
      }

      // Consider special features matches
      const requestedFeatures = request.requirements?.specialFeatures || [];
      const matchingFeatures = requestedFeatures.filter((feature: string) => 
        office.specialFeatures.includes(feature)
      ).length;
      score += matchingFeatures;

      return { office, score };
    });

    // Return office with highest score
    return scored.sort((a, b) => b.score - a.score)[0].office;
  }

  /**
   * Log assignment decision to audit log
   */
  private async logAssignment(
    office: SheetOffice,
    request: SchedulingRequest
  ): Promise<void> {
    await this.sheetsService.addAuditLog({
      timestamp: new Date().toISOString(),
      eventType: 'OFFICE_ASSIGNMENT',
      description: `Assigned office ${office.officeId} to client ${request.clientId}`,
      user: 'SYSTEM',
      systemNotes: `Clinician: ${request.clinicianId}, DateTime: ${request.dateTime}`
    });
  }
}import type { 
  SheetOffice, 
  AssignmentRule, 
  ClientPreference,
  SheetClinician
} from '@/types/sheets';

import type {
  SchedulingRequest,
  SchedulingResult,
  SchedulingConflict
} from '@/types/scheduling';

interface RuleEvaluationResult {
  score: number;
  reason: string;
  log: string[];
}

interface OfficeScore {
  office: SheetOffice;
  score: number;
  reasons: string[];
  conflicts: SchedulingConflict[];
  log: string[];
}

export class OfficeAssignmentService {
  constructor(
    private readonly offices: SheetOffice[],
    private readonly rules: AssignmentRule[],
    private readonly clinicians: SheetClinician[],
    private readonly clientPreference?: ClientPreference,
    private readonly existingBookings: Map<string, SchedulingRequest[]> = new Map()
  ) {}

  async findOptimalOffice(request: SchedulingRequest): Promise<SchedulingResult> {
    const log: string[] = [`Starting office assignment for request: ${JSON.stringify(request)}`];
    
    try {
      // 1. Get clinician details
      const clinician = this.clinicians.find(c => c.clinicianId === request.clinicianId);
      if (!clinician) {
        throw new Error(`Clinician ${request.clinicianId} not found`);
      }
      log.push(`Found clinician: ${clinician.name} (${clinician.role})`);

      // 2. Filter valid offices based on basic requirements
      const validOffices = this.filterValidOffices(request, clinician);
      log.push(`Found ${validOffices.length} initially valid offices`);

      if (validOffices.length === 0) {
        return {
          success: false,
          error: 'No offices match basic requirements',
          evaluationLog: log
        };
      }

      // 3. Score each valid office
      const scoredOffices: OfficeScore[] = [];
      
      for (const office of validOffices) {
        const score = await this.scoreOffice(office, request, clinician);
        scoredOffices.push(score);
        log.push(`Scored office ${office.officeId}: ${score.score} points`);
        log.push(...score.log);
      }

      // 4. Sort by score and check for hard matches
      const hardMatches = scoredOffices.filter(score => 
        score.reasons.some(reason => reason.startsWith('HARD:'))
      );

      const candidates = hardMatches.length > 0 ? hardMatches : scoredOffices;
      candidates.sort((a, b) => b.score - a.score);

      if (candidates.length === 0) {
        return {
          success: false,
          error: 'No suitable offices found after scoring',
          evaluationLog: log
        };
      }

      const bestMatch = candidates[0];
      log.push(`Selected office ${bestMatch.office.officeId} with score ${bestMatch.score}`);
      log.push(`Assignment reasons: ${bestMatch.reasons.join(', ')}`);

      return {
        success: true,
        officeId: bestMatch.office.officeId,
        conflicts: bestMatch.conflicts,
        notes: bestMatch.reasons.join('; '),
        evaluationLog: [...log, ...bestMatch.log]
      };

    } catch (error) {
      log.push(`Error in office assignment: ${error instanceof Error ? error.message : 'Unknown error'}`);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error occurred',
        evaluationLog: log
      };
    }
  }

  private filterValidOffices(
    request: SchedulingRequest,
    clinician: SheetClinician
  ): SheetOffice[] {
    const log: string[] = [];
    
    return this.offices.filter(office => {
      // Check if office is in service
      if (!office.inService) {
        log.push(`Office ${office.officeId} filtered: not in service`);
        return false;
      }

      // Check accessibility requirements
      if (request.requirements?.accessibility && !office.isAccessible) {
        log.push(`Office ${office.officeId} filtered: accessibility requirements not met`);
        return false;
      }

      // Check clinician preferences - BUT don't exclude if they're the primary clinician
      if (office.primaryClinician !== clinician.clinicianId && 
          clinician.preferredOffices.length > 0 && 
          !clinician.preferredOffices.includes(office.officeId)) {
        log.push(`Office ${office.officeId} filtered: not in clinician's preferred offices`);
        return false;
      }

      // Check special features
      if (request.requirements?.specialFeatures?.length) {
        const hasAllFeatures = request.requirements.specialFeatures.every(
          feature => office.specialFeatures.includes(feature)
        );
        if (!hasAllFeatures) {
          log.push(`Office ${office.officeId} filtered: missing required features`);
          return false;
        }
      }

      // Check session type requirements
      if (request.sessionType === 'group' && 
          !office.specialFeatures.includes('group')) {
        log.push(`Office ${office.officeId} filtered: not suitable for group sessions`);
        return false;
      }

      return true;
    });
  }

  private async scoreOffice(
    office: SheetOffice,
    request: SchedulingRequest,
    clinician: SheetClinician
  ): Promise<OfficeScore> {
    const score: OfficeScore = {
      office,
      score: 0,
      reasons: [],
      conflicts: [],
      log: [`Starting evaluation for office ${office.officeId}`]
    };

    // 1. Check existing bookings and conflicts
    const existingBookings = this.existingBookings.get(office.officeId) || [];
    const timeConflicts = this.checkTimeConflicts(request, existingBookings);
    
    if (timeConflicts.length > 0) {
      score.log.push(`Found ${timeConflicts.length} time conflicts`);
      score.conflicts = timeConflicts;
      return score;
    }

    // 2. Apply base scoring
    
    // Primary clinician office gets highest base score
    if (office.primaryClinician === clinician.clinicianId) {
      score.score += 1000;
      score.reasons.push('HARD: Primary clinician office');
      score.log.push('Added 1000 points: Primary clinician office');
    }
    
    // Alternative clinicians get good but lower score
    else if (office.alternativeClinicians?.includes(clinician.clinicianId)) {
      score.score += 500;
      score.reasons.push('Alternative clinician office');
      score.log.push('Added 500 points: Alternative clinician office');
    }
    
    // Preferred office bonus
    if (clinician.preferredOffices.includes(office.officeId)) {
      score.score += 200;
      score.reasons.push('Clinician preferred office');
      score.log.push('Added 200 points: Clinician preferred office');
    }

    // 3. Apply rules in priority order
    const sortedRules = [...this.rules]
      .filter(rule => rule.active)
      .sort((a, b) => a.priority - b.priority);

    for (const rule of sortedRules) {
      const ruleScore = this.evaluateRule(rule, office, request, clinician);
      score.score += ruleScore.score;
      if (ruleScore.score > 0) {
        score.reasons.push(ruleScore.reason);
        score.log.push(...ruleScore.log);
      }
    }

    // 4. Apply client preferences if available
    if (this.clientPreference) {
      const prefScore = this.evaluateClientPreferences(office);
      score.score += prefScore.score;
      if (prefScore.score > 0) {
        score.reasons.push(...prefScore.reasons);
        score.log.push(...prefScore.log);
      }
    }

    // 5. Apply session type specific scoring
    const sessionScore = this.evaluateSessionType(office, request.sessionType);
    score.score += sessionScore.score;
    if (sessionScore.score > 0) {
      score.reasons.push(sessionScore.reason);
      score.log.push(...sessionScore.log);
    }

    score.log.push(`Final score for ${office.officeId}: ${score.score}`);
    return score;
  }

  private evaluateRule(
    rule: AssignmentRule,
    office: SheetOffice,
    request: SchedulingRequest,
    clinician: SheetClinician
  ): RuleEvaluationResult {
    const log: string[] = [`Evaluating rule: ${rule.ruleName}`];
    
    // Check if this rule applies to this office
    if (!rule.officeIds.includes(office.officeId)) {
      return { score: 0, reason: '', log: [`Rule ${rule.ruleName} doesn't apply to office ${office.officeId}`] };
    }

    switch (rule.ruleType) {
      case 'accessibility':
        if (request.requirements?.accessibility && office.isAccessible) {
          const score = rule.overrideLevel === 'hard' ? 1000 : 200;
          return {
            score,
            reason: rule.overrideLevel === 'hard' ? `HARD: ${rule.ruleName}` : rule.ruleName,
            log: [`Added ${score} points for accessibility match`]
          };
        }
        break;

      case 'age_group':
        if (request.clientAge) {
          const condition = rule.condition;
          if (this.evaluateAgeCondition(condition, request.clientAge)) {
            const score = rule.overrideLevel === 'hard' ? 800 : 150;
            return {
              score,
              reason: rule.overrideLevel === 'hard' ? `HARD: ${rule.ruleName}` : rule.ruleName,
              log: [`Added ${score} points for age group match`]
            };
          }
        }
        break;

      case 'session_type':
        if (request.sessionType === rule.condition) {
          const score = rule.overrideLevel === 'hard' ? 600 : 100;
          return {
            score,
            reason: rule.overrideLevel === 'hard' ? `HARD: ${rule.ruleName}` : rule.ruleName,
            log: [`Added ${score} points for session type match`]
          };
        }
        break;
    }

    return { score: 0, reason: '', log: [`No points added for rule ${rule.ruleName}`] };
  }

  private evaluateClientPreferences(office: SheetOffice): {
    score: number;
    reasons: string[];
    log: string[];
  } {
    const result = {
      score: 0,
      reasons: [] as string[],
      log: ['Evaluating client preferences']
    };

    if (!this.clientPreference) {
      result.log.push('No client preferences available');
      return result;
    }

    // Check previous office assignment
    if (this.clientPreference.assignedOffice === office.officeId) {
      const roomScore = (this.clientPreference.roomConsistency || 0) * 50;
      result.score += roomScore;
      result.reasons.push('Previous office match');
      result.log.push(`Added ${roomScore} points for previous office match`);
    }

    // Safely check mobility needs
    const mobilityNeeds = this.clientPreference.mobilityNeeds || [];
    if (Array.isArray(mobilityNeeds) && mobilityNeeds.length > 0 && office.isAccessible) {
      result.score += 300;
      result.reasons.push('Meets mobility needs');
      result.log.push('Added 300 points for mobility needs match');
    }

    // Safely check sensory preferences
    const sensoryPrefs = this.clientPreference.sensoryPreferences || [];
    if (Array.isArray(sensoryPrefs) && sensoryPrefs.length > 0) {
      const matchingSensory = sensoryPrefs.filter(
        pref => office.specialFeatures.includes(pref)
      );
      if (matchingSensory.length > 0) {
        const sensoryScore = matchingSensory.length * 50;
        result.score += sensoryScore;
        result.reasons.push('Matches sensory preferences');
        result.log.push(`Added ${sensoryScore} points for sensory preference matches`);
      }
    }

    return result;
  }

  private evaluateSessionType(
    office: SheetOffice,
    sessionType: string
  ): RuleEvaluationResult {
    switch (sessionType) {
      case 'group':
        if (office.specialFeatures.includes('group')) {
          return {
            score: 200,
            reason: 'Suitable for group sessions',
            log: ['Added 200 points for group session capability']
          };
        }
        break;

      case 'family':
        if (office.size === 'large') {
          return {
            score: 150,
            reason: 'Suitable size for family sessions',
            log: ['Added 150 points for family session size']
          };
        }
        break;
    }

    return { score: 0, reason: '', log: ['No specific session type points added'] };
  }

  private evaluateAgeCondition(condition: string, age: number): boolean {
    // Handle different age condition formats
    if (condition.includes('&&')) {
      const [minStr, maxStr] = condition.split('&&');
      const minAge = parseInt(minStr.split('>')[1].trim());
      const maxAge = parseInt(maxStr.split('<=')[1].trim());
      return age > minAge && age <= maxAge;
    }
    
    if (condition.includes('<=')) {
      const maxAge = parseInt(condition.split('<=')[1].trim());
      return age <= maxAge;
    }
    
    if (condition.includes('>=')) {
      const minAge = parseInt(condition.split('>=')[1].trim());
      return age >= minAge;
    }

    return false;
  }

  private checkTimeConflicts(
    request: SchedulingRequest,
    existingBookings: SchedulingRequest[]
  ): SchedulingConflict[] {
    const conflicts: SchedulingConflict[] = [];
    const requestStart = new Date(request.dateTime);
    const requestEnd = new Date(requestStart.getTime() + (request.duration * 60 * 1000));

    existingBookings.forEach(booking => {
      const bookingStart = new Date(booking.dateTime);
      const bookingEnd = new Date(bookingStart.getTime() + (booking.duration * 60 * 1000));

      if (requestStart < bookingEnd && requestEnd > bookingStart) {
        conflicts.push({
          officeId: request.clinicianId, // Using clinicianId for tracking
          existingBooking: booking,
          resolution: {
            type: 'cannot-relocate',
            reason: 'Time slot overlap with existing booking'
          }
        });
      }
    });

    return conflicts;
  }
}// src/lib/google/sheets.ts

import { google } from 'googleapis';
import { JWT } from 'google-auth-library';
import type { 
  SheetOffice, 
  SheetClinician, 
  AssignmentRule, 
  ClientPreference,
  ScheduleConfig,
  IntegrationSetting,
  AuditLogEntry 
} from '@/types/sheets';

import type { AppointmentRecord } from '../../types/scheduling';
import { SheetsCacheService } from './sheets-cache';

export enum AuditEventType {
  CONFIG_UPDATED = 'CONFIG_UPDATED',
  RULE_CREATED = 'RULE_CREATED',
  RULE_UPDATED = 'RULE_UPDATED',
  CLIENT_PREFERENCES_UPDATED = 'CLIENT_PREFERENCES_UPDATED',
  CLIENT_OFFICE_ASSIGNED = 'CLIENT_OFFICE_ASSIGNED',
  APPOINTMENT_CREATED = 'APPOINTMENT_CREATED',
  APPOINTMENT_UPDATED = 'APPOINTMENT_UPDATED',
  APPOINTMENT_CANCELLED = 'APPOINTMENT_CANCELLED',
  APPOINTMENT_DELETED = 'APPOINTMENT_DELETED',
  SYSTEM_ERROR = 'SYSTEM_ERROR',
  WEBHOOK_RECEIVED = 'WEBHOOK_RECEIVED',
  INTEGRATION_UPDATED = 'INTEGRATION_UPDATED',
  DAILY_ASSIGNMENTS_UPDATED = 'DAILY_ASSIGNMENTS_UPDATED',
  CRITICAL_ERROR = 'CRITICAL_ERROR'
}

export class GoogleSheetsService {
  private sheets;
  private spreadsheetId: string;
  private cache: SheetsCacheService;

  constructor(credentials: any, spreadsheetId: string) {
    const client = new JWT({
      email: credentials.client_email,
      key: credentials.private_key,
      scopes: ['https://www.googleapis.com/auth/spreadsheets']
    });

    this.sheets = google.sheets({ version: 'v4', auth: client });
    this.spreadsheetId = spreadsheetId;
    this.cache = new SheetsCacheService();
  }

  private async readSheet(range: string) {
    const cacheKey = `sheet:${range}`;
    
    try {
      return await this.cache.getOrFetch(
        cacheKey,
        async () => {
          console.log(`Reading sheet range: ${range}`);
          const response = await this.sheets.spreadsheets.values.get({
            spreadsheetId: this.spreadsheetId,
            range,
          });
          return response.data.values;
        },
        60000 // 1 minute cache TTL
      );
    } catch (error) {
      console.error(`Error reading sheet ${range}:`, error);
      await this.addAuditLog({
        timestamp: new Date().toISOString(),
        eventType: AuditEventType.SYSTEM_ERROR,
        description: `Failed to read sheet ${range}`,
        user: 'SYSTEM',
        systemNotes: JSON.stringify(error)
      });
      throw new Error(`Failed to read sheet ${range}`);
    }
  }

  private async appendRows(range: string, values: any[][]) {
    try {
      await this.sheets.spreadsheets.values.append({
        spreadsheetId: this.spreadsheetId,
        range,
        valueInputOption: 'RAW',
        requestBody: {
          values
        }
      });
    } catch (error) {
      console.error(`Error appending to sheet ${range}:`, error);
      throw error;
    }
  }

  async getOffices(): Promise<SheetOffice[]> {
    const values = await this.readSheet('Offices Configuration!A2:M');
    
    return values?.map(row => ({
      officeId: row[0],
      name: row[1],
      unit: row[2],
      inService: row[3] === 'TRUE',
      floor: row[4] as 'upstairs' | 'downstairs',
      isAccessible: row[5] === 'TRUE',
      size: row[6] as 'small' | 'medium' | 'large',
      ageGroups: row[7]?.split(',').map((s: string) => s.trim()) || [],
      specialFeatures: row[8]?.split(',').map((s: string) => s.trim()) || [],
      primaryClinician: row[9] || undefined,
      alternativeClinicians: row[10]?.split(',').map((s: string) => s.trim()) || [],
      isFlexSpace: row[11] === 'TRUE',
      notes: row[12]
    })) ?? [];
  }

  async getClinicians(): Promise<SheetClinician[]> {
    const values = await this.readSheet('Clinicians Configuration!A2:M');
    
    return values?.map(row => ({
      clinicianId: row[0],
      name: row[1],
      email: row[2],
      role: row[3] as 'owner' | 'admin' | 'clinician' | 'intern',
      ageRangeMin: Number(row[4]),
      ageRangeMax: Number(row[5]),
      specialties: row[6]?.split(',').map((s: string) => s.trim()) || [],
      caseloadLimit: Number(row[7]),
      currentCaseload: Number(row[8]),
      preferredOffices: row[9]?.split(',').map((s: string) => s.trim()) || [],
      allowsRelationship: row[10] === 'TRUE',
      certifications: row[11]?.split(',').map((s: string) => s.trim()) || [],
      intakeQPractitionerId: row[12]
    })) ?? [];
  }

  async getAssignmentRules(): Promise<AssignmentRule[]> {
    const values = await this.readSheet('Assignment Rules!A2:H');
    
    return values?.map(row => ({
      priority: Number(row[0]),
      ruleName: row[1],
      ruleType: row[2],
      condition: row[3],
      officeIds: row[4]?.split(',').map((s: string) => s.trim()) || [],
      overrideLevel: row[5] as 'hard' | 'soft' | 'none',
      active: row[6] === 'TRUE',
      notes: row[7]
    })) ?? [];
  }

  async getClientPreferences(): Promise<ClientPreference[]> {
    const values = await this.readSheet('Client Preferences!A2:L');
    
    return values?.map(row => ({
      clientId: row[0],
      name: row[1],
      email: row[2],
      mobilityNeeds: JSON.parse(row[3] || '[]'),
      sensoryPreferences: JSON.parse(row[4] || '[]'),
      physicalNeeds: JSON.parse(row[5] || '[]'),
      roomConsistency: Number(row[6]),
      supportNeeds: JSON.parse(row[7] || '[]'),
      specialFeatures: [], // Added required field with default empty array
      additionalNotes: row[8],
      lastUpdated: row[9],
      preferredClinician: row[10],
      assignedOffice: row[11]
    })) ?? [];
  }

  async getScheduleConfig(): Promise<ScheduleConfig[]> {
    const values = await this.readSheet('Schedule Configuration!A2:E');
    
    return values?.map(row => ({
      settingName: row[0],
      value: row[1],
      description: row[2],
      lastUpdated: row[3],
      updatedBy: row[4]
    })) ?? [];
  }

  async getIntegrationSettings(): Promise<IntegrationSetting[]> {
    const values = await this.readSheet('Integration Settings!A2:E');
    
    return values?.map(row => ({
      serviceName: row[0],
      settingType: row[1],
      value: row[2],
      description: row[3],
      lastUpdated: row[4]
    })) ?? [];
  }

  async addAuditLog(entry: AuditLogEntry): Promise<void> {
    try {
      const rowData = [
        entry.timestamp,
        entry.eventType,
        entry.description,
        entry.user,
        entry.previousValue || '',
        entry.newValue || '',
        entry.systemNotes || ''
      ];

      await this.appendRows('Audit Log!A:G', [rowData]);
      console.log('Audit log entry added:', entry);
    } catch (error) {
      console.error('Error adding audit log:', error);
      console.error('Failed audit log entry:', entry);
    }
  }

  async getRecentAuditLogs(limit: number = 5): Promise<AuditLogEntry[]> {
    try {
      const values = await this.readSheet('Audit Log!A2:G');
      
      if (!values) return [];
      
      if (!values || !Array.isArray(values)) {
        console.log('No appointments found in sheet');
        return [];
      }
      
      return values
        .map(row => ({
          timestamp: row[0],
          eventType: row[1],
          description: row[2],
          user: row[3],
          previousValue: row[4] || undefined,
          newValue: row[5] || undefined,
          systemNotes: row[6] || undefined
        }))
        .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())
        .slice(0, limit);
        
    } catch (error) {
      console.error('Error reading audit logs:', error);
      return [];
    }
  }

  async getOfficeAppointments(officeId: string, date: string): Promise<AppointmentRecord[]> {
    const startOfDay = new Date(date);
    startOfDay.setHours(0, 0, 0, 0);
    
    const endOfDay = new Date(date);
    endOfDay.setHours(23, 59, 59, 999);

    const appointments = await this.getAppointments(
      startOfDay.toISOString(),
      endOfDay.toISOString()
    );

    if (officeId === 'all') {
      return appointments;
    }

    return appointments.filter(appt => appt.officeId === officeId);
  }

  async addAppointment(appointment: AppointmentRecord): Promise<void> {
    try {
      const rowData = [
        appointment.appointmentId,
        appointment.clientId,
        appointment.clientName,
        appointment.clinicianId,
        appointment.clinicianName,
        appointment.officeId,
        appointment.sessionType,
        appointment.startTime,
        appointment.endTime,
        appointment.status,
        appointment.lastUpdated,
        appointment.source,
        JSON.stringify(appointment.requirements || {}),
        appointment.notes || ''
      ];
  
      await this.appendRows('Appointments!A:N', [rowData]);
  
      await this.addAuditLog({
        timestamp: new Date().toISOString(),
        eventType: AuditEventType.APPOINTMENT_CREATED,
        description: `Added appointment ${appointment.appointmentId}`,
        user: 'SYSTEM',
        systemNotes: JSON.stringify(appointment)
      });
  
      await this.refreshCache('Appointments!A2:N');
    } catch (error) {
      console.error('Error adding appointment:', error);
      throw new Error('Failed to add appointment');
    }
  }

  // In sheets.ts
async getAppointments(startDate: string, endDate: string): Promise<AppointmentRecord[]> {
  try {
    const values = await this.readSheet('Appointments!A2:N');
    
    if (!values || !Array.isArray(values)) {
      console.log('No appointments found in sheet');
      return [];
    }

    console.log('Processing appointments from sheet:', {
      rowCount: values.length,
      dateRange: { startDate, endDate }
    });

    const mappedAppointments: AppointmentRecord[] = values
      .map(row => {
        try {
          const appointment: AppointmentRecord = {
            appointmentId: row[0] || '',
            clientId: row[1] || '',
            clientName: row[2] || row[1] || '', // Use name if available, fall back to ID
            clinicianId: row[3] || '',
            clinicianName: row[4] || row[3] || '', // Use name if available, fall back to ID
            officeId: row[5] || '',
            sessionType: (row[6] || 'in-person') as 'in-person' | 'telehealth' | 'group' | 'family',
            startTime: row[7] || '',
            endTime: row[8] || '',
            status: (row[9] || 'scheduled') as 'scheduled' | 'completed' | 'cancelled' | 'rescheduled',
            lastUpdated: row[10] || new Date().toISOString(),
            source: (row[11] || 'manual') as 'intakeq' | 'manual',
            requirements: { accessibility: false, specialFeatures: [] },
            notes: ''
          };

          // Parse requirements JSON safely
          try {
            const requirementsStr = row[12]?.toString().trim();
            if (requirementsStr) {
              // Remove any control characters and clean the JSON string
              const cleanJson = requirementsStr
                .replace(/[\u0000-\u0019]+/g, '')
                .replace(/\s+/g, ' ')
                .trim();
              appointment.requirements = JSON.parse(cleanJson);
            }
          } catch (err) {
            console.error('Error parsing requirements JSON:', err, {value: row[12]});
          }

          // Add notes if present
          if (row[13]) {
            appointment.notes = row[13];
          }

          return appointment;
        } catch (error) {
          console.error('Error mapping appointment row:', error, { row });
          return null;
        }
      })
      .filter((appt): appt is AppointmentRecord => appt !== null)
      .filter(appt => {
        try {
          const apptDate = new Date(appt.startTime).toISOString().split('T')[0];
          const targetDate = new Date(startDate).toISOString().split('T')[0];
          
          console.log('Filtering appointment:', {
            id: appt.appointmentId,
            date: apptDate,
            target: targetDate,
            match: apptDate === targetDate,
            startTime: appt.startTime
          });
          
          return apptDate === targetDate;
        } catch (error) {
          console.error('Error filtering appointment:', error, { appt });
          return false;
        }
      });

    console.log('Appointment processing complete:', {
      totalFound: mappedAppointments.length,
      dateRange: { startDate, endDate }
    });

    return mappedAppointments;
  } catch (error) {
    console.error('Error reading appointments:', error);
    throw new Error('Failed to read appointments');
  }
}

  async updateAppointment(appointment: AppointmentRecord): Promise<void> {
    try {
      const values = await this.readSheet('Appointments!A:A');
      const appointmentRow = values?.findIndex(row => row[0] === appointment.appointmentId);

      if (!values || !appointmentRow || appointmentRow < 0) {
        throw new Error(`Appointment ${appointment.appointmentId} not found`);
      }

      const rowData = [
        appointment.appointmentId,
        appointment.clientId,
        appointment.clinicianId,
        appointment.officeId,
        appointment.sessionType,
        appointment.startTime,
        appointment.endTime,
        appointment.status,
        appointment.lastUpdated,
        appointment.source,
        JSON.stringify(appointment.requirements || {}),
        appointment.notes || ''
      ];

      await this.sheets.spreadsheets.values.update({
        spreadsheetId: this.spreadsheetId,
        range: `Appointments!A${appointmentRow + 1}:L${appointmentRow + 1}`,
        valueInputOption: 'RAW',
        requestBody: {
          values: [rowData]
        }
      });

      await this.addAuditLog({
        timestamp: new Date().toISOString(),
        eventType: AuditEventType.APPOINTMENT_UPDATED,
        description: `Updated appointment ${appointment.appointmentId}`,
        user: 'SYSTEM',
        previousValue: JSON.stringify(values[appointmentRow]),
        newValue: JSON.stringify(rowData)
      });

      await this.refreshCache('Appointments!A2:N');
    } catch (error) {
      console.error('Error updating appointment:', error);
      throw new Error('Failed to update appointment');
    }
  }

  // Add after the updateAppointment method:
  async getAppointment(appointmentId: string): Promise<AppointmentRecord | null> {
    try {
      const values = await this.readSheet('Appointments!A2:N');
      if (!values) return null;
  
      const appointmentRow = values.find(row => row[0] === appointmentId);
      if (!appointmentRow) return null;
  
      return {
        appointmentId: appointmentRow[0],
        clientId: appointmentRow[1],
        clientName: appointmentRow[2],
        clinicianId: appointmentRow[3],
        clinicianName: appointmentRow[4],
        officeId: appointmentRow[5],
        sessionType: appointmentRow[6] as 'in-person' | 'telehealth' | 'group' | 'family',
        startTime: appointmentRow[7],
        endTime: appointmentRow[8],
        status: appointmentRow[9] as 'scheduled' | 'completed' | 'cancelled' | 'rescheduled',
        lastUpdated: appointmentRow[10],
        source: appointmentRow[11] as 'intakeq' | 'manual',
        requirements: JSON.parse(appointmentRow[12] || '{}'),
        notes: appointmentRow[13]
      };
    } catch (error) {
      console.error('Error getting appointment:', error);
      return null;
    }
  }


async deleteAppointment(appointmentId: string): Promise<void> {
  try {
    const values = await this.readSheet('Appointments!A:A');
    const appointmentRow = values?.findIndex(row => row[0] === appointmentId);

    if (!values || !appointmentRow || appointmentRow < 0) {
      throw new Error(`Appointment ${appointmentId} not found`);
    }

    await this.sheets.spreadsheets.values.clear({
      spreadsheetId: this.spreadsheetId,
      range: `Appointments!A${appointmentRow + 1}:L${appointmentRow + 1}`
    });

    await this.refreshCache('Appointments!A2:N');
  } catch (error) {
    console.error('Error deleting appointment:', error);
    throw new Error('Failed to delete appointment');
  }
}

  async updateClientPreference(preference: ClientPreference): Promise<void> {
    try {
      const values = await this.readSheet('Client Preferences!A:A');
      const clientRow = values?.findIndex(row => row[0] === preference.clientId);
      
      const rowData = [
        preference.clientId,
        preference.name,
        preference.email,
        JSON.stringify(preference.mobilityNeeds),
        JSON.stringify(preference.sensoryPreferences),
        JSON.stringify(preference.physicalNeeds),
        preference.roomConsistency.toString(),
        JSON.stringify(preference.supportNeeds),
        preference.additionalNotes || '',
        new Date().toISOString(),
        preference.preferredClinician || '',
        preference.assignedOffice || ''
      ];

      if (clientRow && clientRow > 0) {
        await this.sheets.spreadsheets.values.update({
          spreadsheetId: this.spreadsheetId,
          range: `Client Preferences!A${clientRow + 1}`,
          valueInputOption: 'RAW',
          requestBody: {
            values: [rowData]
          }
        });
      } else {
        await this.appendRows('Client Preferences!A:L',
          [rowData]);
        }
  
        await this.addAuditLog({
          timestamp: new Date().toISOString(),
          eventType: AuditEventType.CLIENT_PREFERENCES_UPDATED,
          description: `Updated preferences for client ${preference.clientId}`,
          user: 'SYSTEM',
          systemNotes: JSON.stringify(preference)
        });
  
        await this.refreshCache('Client Preferences!A2:L');
  
      } catch (error) {
        console.error('Error updating client preference:', error);
        throw error;
      }
    }
    
    private extractMobilityNeeds(responses: Record<string, any>): string[] {
      const needs: string[] = [];
      
      const mobilityField = responses['Do you use any mobility devices?'] || [];
      if (Array.isArray(mobilityField)) {
        if (mobilityField.includes('Wheelchair')) needs.push('wheelchair_access');
        if (mobilityField.includes('Crutches')) needs.push('mobility_aid_crutches');
        if (mobilityField.includes('Walking boot')) needs.push('mobility_aid_boot');
      }
      
      const otherMobility = responses['Access needs related to mobility/disability (Please specify)'];
      if (otherMobility) needs.push(otherMobility);
      
      return needs;
    }
    
    private extractSensoryPreferences(responses: Record<string, any>): string[] {
      const preferences: string[] = [];
      
      const sensoryField = responses['Do you experience sensory sensitivities?'] || [];
      if (Array.isArray(sensoryField)) {
        if (sensoryField.includes('Light sensitivity')) preferences.push('light_sensitive');
        if (sensoryField.includes('Preference for only natural light')) preferences.push('natural_light');
        if (sensoryField.includes('Auditory sensitivity')) preferences.push('sound_sensitive');
      }
      
      const otherSensory = responses['Other (Please specify):'];
      if (otherSensory) preferences.push(otherSensory);
      
      return preferences;
    }
    
    private extractPhysicalNeeds(responses: Record<string, any>): string[] {
      const needs: string[] = [];
      
      const physicalField = responses['Do you experience challenges with physical environment?'] || [];
      if (Array.isArray(physicalField)) {
        if (physicalField.includes('Seating support')) needs.push('seating_support');
        if (physicalField.includes('Difficulty with stairs')) needs.push('no_stairs');
        if (physicalField.includes('Need to see the door')) needs.push('door_visible');
      }
      
      return needs;
    }
    
    private extractRoomConsistency(responses: Record<string, any>): number {
      const value = responses['Please indicate your comfort level with this possibility:'];
      const consistencyMap: Record<string, number> = {
        '1 - Strong preference for consistency': 5,
        '2 - High preference for consistency': 4,
        '3 - Neutral about room changes': 3,
        '4 - Somewhat comfortable with room changes when needed': 2,
        '5 - Very comfortable with room changes when needed': 1
      };
      
      return consistencyMap[value] || 3;
    }
    
    private extractSupportNeeds(responses: Record<string, any>): string[] {
      const needs: string[] = [];
      
      const supportField = responses['Do you have support needs that involve any of the following?'] || [];
      if (Array.isArray(supportField)) {
        if (supportField.includes('Space for a service animal')) needs.push('service_animal');
        if (supportField.includes('A support person present')) needs.push('support_person');
        if (supportField.includes('The use of communication aids')) needs.push('communication_aids');
      }
      
      return needs;
    }

    async processAccessibilityForm(formData: {
      clientId: string;
      clientName: string;
      clientEmail: string;
      formResponses: Record<string, any>;
    }): Promise<void> {
      try {
        // Map form responses to client preferences structure
        const preference: ClientPreference = {
          clientId: formData.clientId,
          name: formData.clientName,
          email: formData.clientEmail,
          mobilityNeeds: this.extractMobilityNeeds(formData.formResponses),
          sensoryPreferences: this.extractSensoryPreferences(formData.formResponses),
          physicalNeeds: this.extractPhysicalNeeds(formData.formResponses),
          roomConsistency: this.extractRoomConsistency(formData.formResponses),
          supportNeeds: this.extractSupportNeeds(formData.formResponses),
          specialFeatures: [], // Will be derived from other preferences
          additionalNotes: formData.formResponses['Is there anything else we should know about your space or accessibility needs?'] || '',
          lastUpdated: new Date().toISOString(),
          preferredClinician: '',
          assignedOffice: ''
        };
    
        // Update client preferences
        await this.updateClientPreference(preference);
    
        await this.addAuditLog({
          timestamp: new Date().toISOString(),
          eventType: AuditEventType.CLIENT_PREFERENCES_UPDATED,
          description: `Processed accessibility form for client ${formData.clientId}`,
          user: 'SYSTEM',
          systemNotes: JSON.stringify(formData.formResponses)
        });
    
      } catch (error) {
        console.error('Error processing accessibility form:', error);
        await this.addAuditLog({
          timestamp: new Date().toISOString(),
          eventType: AuditEventType.SYSTEM_ERROR,
          description: `Failed to process accessibility form for client ${formData.clientId}`,
          user: 'SYSTEM',
          systemNotes: error instanceof Error ? error.message : 'Unknown error'
        });
        throw error;
      }
    }

    /**
     * Force refresh cache for a specific range
     */
    async refreshCache(range: string): Promise<void> {
      this.cache.invalidate(`sheet:${range}`);
    }
  
    /**
     * Clear all cached data
     */
    clearCache(): void {
      this.cache.clearAll();
    }
  }// src/lib/intakeq/service.ts

import type { IntakeQAppointment } from '@/types/webhooks';
import { GoogleSheetsService, AuditEventType } from '@/lib/google/sheets';
import crypto from 'crypto';

export class IntakeQService {
  private readonly baseUrl: string;
  private readonly headers: HeadersInit;
  private readonly MAX_RETRIES = 3;
  private readonly RETRY_DELAY = 1000; // 1 second base delay

  constructor(
    private readonly apiKey: string,
    private readonly sheetsService: GoogleSheetsService,
    baseUrl: string = 'https://intakeq.com/api/v1',
    private readonly useMockData: boolean = false
  ) {
    this.baseUrl = baseUrl;
    this.headers = {
      'X-Auth-Key': apiKey,
      'Accept': 'application/json'
    };
  }

  async getAppointments(startDate: string, endDate: string): Promise<IntakeQAppointment[]> {
    try {
      console.log('Fetching IntakeQ appointments:', { startDate, endDate });

      // Convert dates to EST and set proper day boundaries
      const requestedStart = new Date(startDate);
      const requestedEnd = new Date(endDate);

      // Ensure we're working with EST dates
      const startEST = new Date(requestedStart.toLocaleString('en-US', { timeZone: 'America/New_York' }));
      const endEST = new Date(requestedEnd.toLocaleString('en-US', { timeZone: 'America/New_York' }));
      startEST.setHours(0, 0, 0, 0);
      endEST.setHours(23, 59, 59, 999);

      console.log('Date ranges (EST):', {
        start: startEST.toLocaleString('en-US', { timeZone: 'America/New_York' }),
        end: endEST.toLocaleString('en-US', { timeZone: 'America/New_York' })
      });

      const params = new URLSearchParams({
        StartDate: startEST.getTime().toString(),
        EndDate: endEST.getTime().toString(),
        Status: 'Confirmed,WaitingConfirmation,Pending',
        dateField: 'StartDateIso'
      });

      const url = `${this.baseUrl}/appointments?${params}`;

      console.log('IntakeQ Request:', {
        endpoint: '/appointments',
        params: Object.fromEntries(params),
        requestRange: {
          start: startEST.toLocaleString('en-US', { timeZone: 'America/New_York' }),
          end: endEST.toLocaleString('en-US', { timeZone: 'America/New_York' })
        }
      });

      let attempt = 0;
      let response;
      let lastError;

      while (attempt < this.MAX_RETRIES) {
        try {
          response = await fetch(url, {
            method: 'GET',
            headers: this.headers
          });

          if (response.ok) break;

          const errorText = await response.text();
          lastError = `HTTP ${response.status}: ${errorText}`;
          
          console.log(`Attempt ${attempt + 1} failed:`, {
            status: response.status,
            error: lastError
          });

          attempt++;
          if (attempt < this.MAX_RETRIES) {
            const delay = this.RETRY_DELAY * Math.pow(2, attempt - 1);
            await new Promise(resolve => setTimeout(resolve, delay));
          }
        } catch (error) {
          lastError = error instanceof Error ? error.message : 'Unknown error';
          console.error(`Attempt ${attempt + 1} error:`, lastError);
          
          attempt++;
          if (attempt < this.MAX_RETRIES) {
            const delay = this.RETRY_DELAY * Math.pow(2, attempt - 1);
            await new Promise(resolve => setTimeout(resolve, delay));
          }
        }
      }

      if (!response || !response.ok) {
        throw new Error(`IntakeQ API error after ${this.MAX_RETRIES} attempts: ${lastError}`);
      }

      const text = await response.text();
      console.log('Raw IntakeQ Response:', text.substring(0, 500) + '...');

      const appointments = JSON.parse(text);

      // Filter appointments to match requested date in EST
      const filteredAppointments = appointments.filter((appt: IntakeQAppointment) => {
        const apptDate = new Date(appt.StartDateIso);
        const apptEST = new Date(apptDate.toLocaleString('en-US', { timeZone: 'America/New_York' }));
        apptEST.setHours(0, 0, 0, 0);  // Compare dates only

        const targetEST = new Date(requestedStart.toLocaleString('en-US', { timeZone: 'America/New_York' }));
        targetEST.setHours(0, 0, 0, 0);  // Compare dates only

        console.log('Appointment comparison:', {
          id: appt.Id,
          client: appt.ClientName,
          apptDate: apptEST.toLocaleString('en-US', { timeZone: 'America/New_York' }),
          targetDate: targetEST.toLocaleString('en-US', { timeZone: 'America/New_York' }),
          matches: apptEST.getTime() === targetEST.getTime()
        });

        return apptEST.getTime() === targetEST.getTime();
      });

      console.log('IntakeQ Response:', {
        status: response.status,
        totalReturned: appointments.length,
        matchingDateRange: filteredAppointments.length,
        sampleAppointment: filteredAppointments[0] ? {
          id: filteredAppointments[0].Id,
          name: filteredAppointments[0].ClientName,
          date: filteredAppointments[0].StartDateLocalFormatted,
          status: filteredAppointments[0].Status
        } : null
      });

      return filteredAppointments;
    } catch (error) {
      console.error('IntakeQ API Error:', error instanceof Error ? error.message : 'Unknown error');
      
      await this.sheetsService.addAuditLog({
        timestamp: new Date().toISOString(),
        eventType: AuditEventType.SYSTEM_ERROR,
        description: 'IntakeQ API error',
        user: 'SYSTEM',
        systemNotes: error instanceof Error ? error.message : 'Unknown error'
      });
      
      throw error;
    }
  }

  async validateWebhookSignature(payload: string, signature: string): Promise<boolean> {
    try {
      const secret = process.env.INTAKEQ_WEBHOOK_SECRET;
      if (!secret) {
        console.error('Missing INTAKEQ_WEBHOOK_SECRET environment variable');
        return false;
      }

      // Remove any quotes from the secret
      const cleanSecret = secret.replace(/['"]/g, '');

      // Create HMAC
      const hmac = crypto.createHmac('sha256', cleanSecret);
      hmac.update(payload);
      const calculatedSignature = hmac.digest('hex');

      console.log('Webhook Signature Validation:', {
        signatureMatches: calculatedSignature === signature,
        calculatedLength: calculatedSignature.length,
        providedLength: signature.length,
        payloadLength: payload.length,
      });

      return calculatedSignature === signature;
    } catch (error) {
      console.error('Webhook signature validation error:', error);
      return false;
    }
  }

  async testConnection(): Promise<boolean> {
    try {
      const response = await fetch(`${this.baseUrl}/practitioners`, {
        headers: this.headers
      });

      console.log('IntakeQ Connection Test:', {
        status: response.status,
        ok: response.ok
      });

      return response.ok;
    } catch (error) {
      console.error('IntakeQ connection test failed:', error instanceof Error ? error.message : 'Unknown error');
      return false;
    }
  }
}// src/lib/email/service.ts

import type { EmailTemplate } from '@/lib/email/templates';
import SendGrid from '@sendgrid/mail';
import { GoogleSheetsService, AuditEventType } from '@/lib/google/sheets';

export interface EmailRecipient {
  email: string;
  name: string;
  role: 'admin' | 'clinician';
  preferences?: {
    dailySchedule: boolean;
    conflicts: boolean;
    errors: boolean;
  };
}

export class EmailService {
  private readonly fromEmail: string;
  private readonly fromName: string;

  constructor(
    apiKey: string,
    fromEmail: string,
    fromName: string,
    private readonly sheetsService: GoogleSheetsService
  ) {
    SendGrid.setApiKey(apiKey);
    this.fromEmail = fromEmail;
    this.fromName = fromName;
  }

  /**
   * Send email to recipients
   */
  async sendEmail(
    recipients: EmailRecipient[],
    template: EmailTemplate,
    options: {
      type: 'schedule' | 'error' | 'conflict';
      priority?: 'high' | 'normal';
      retryCount?: number;
    }
  ): Promise<void> {
    try {
      const emails = recipients.map(recipient => ({
        to: {
          email: recipient.email,
          name: recipient.name
        },
        from: {
          email: this.fromEmail,
          name: this.fromName
        },
        subject: template.subject,
        html: template.html,
        text: template.text
      }));

      // Log attempt
      await this.sheetsService.addAuditLog({
        timestamp: new Date().toISOString(),
        eventType: 'EMAIL_NOTIFICATION',
        description: `Sending ${options.type} notifications`,
        user: 'SYSTEM',
        systemNotes: JSON.stringify({
          recipientCount: recipients.length,
          subject: template.subject,
          priority: options.priority
        })
      });

      // Send emails in batches of 100 (SendGrid recommendation)
      const batchSize = 100;
      for (let i = 0; i < emails.length; i += batchSize) {
        const batch = emails.slice(i, i + batchSize);
        await SendGrid.send(batch);
      }

      // Log success
      await this.sheetsService.addAuditLog({
        timestamp: new Date().toISOString(),
        eventType: 'EMAIL_NOTIFICATION',
        description: `Successfully sent ${options.type} notifications`,
        user: 'SYSTEM',
        systemNotes: JSON.stringify({
          recipientCount: recipients.length,
          subject: template.subject
        })
      });
    } catch (error) {
      console.error('Error sending emails:', error);

      // Log error
      await this.sheetsService.addAuditLog({
        timestamp: new Date().toISOString(),
        eventType: AuditEventType.SYSTEM_ERROR,
        description: `Failed to send ${options.type} notifications`,
        user: 'SYSTEM',
        systemNotes: error instanceof Error ? error.message : 'Unknown error'
      });

      // Retry if specified
      if (options.retryCount && options.retryCount > 0) {
        console.log(`Retrying email send (${options.retryCount} attempts remaining)...`);
        await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second before retry
        return this.sendEmail(recipients, template, {
          ...options,
          retryCount: options.retryCount - 1
        });
      }

      throw error;
    }
  }

  /**
   * Filter recipients based on preferences
   */
  filterRecipientsByPreference(
    recipients: EmailRecipient[],
    type: 'dailySchedule' | 'conflicts' | 'errors'
  ): EmailRecipient[] {
    return recipients.filter(recipient => {
      if (!recipient.preferences) return true; // Default to including if no preferences set
      return recipient.preferences[type] !== false; // Include unless explicitly set to false
    });
  }

  /**
   * Get admin recipients from sheets
   */
  async getAdminRecipients(): Promise<EmailRecipient[]> {
    try {
      const clinicians = await this.sheetsService.getClinicians();
      
      return clinicians
        .filter(clinician => clinician.role === 'admin' || clinician.role === 'owner')
        .map(clinician => ({
          email: clinician.email,
          name: clinician.name,
          role: clinician.role === 'owner' || clinician.role === 'admin' ? 'admin' as const : 'clinician' as const,
          preferences: {
            dailySchedule: true,
            conflicts: true,
            errors: true
          }
        }));
    } catch (error) {
      console.error('Error getting admin recipients:', error);
      throw error;
    }
  }

  /**
   * Get clinician recipients
   */
  async getClinicianRecipients(): Promise<EmailRecipient[]> {
    try {
      const clinicians = await this.sheetsService.getClinicians();
      
      return clinicians
        .filter(clinician => clinician.role === 'clinician' || clinician.role === 'intern')
        .map(clinician => ({
          email: clinician.email,
          name: clinician.name,
          role: 'clinician',
          preferences: {
            dailySchedule: true,
            conflicts: true,
            errors: false
          }
        }));
    } catch (error) {
      console.error('Error getting clinician recipients:', error);
      throw error;
    }
  }
}